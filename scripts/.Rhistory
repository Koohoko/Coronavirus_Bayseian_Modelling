library("MASS")
data("OME")
?OME # background on the data
head(OME)
any(is.na(OME)) # check for missing values
dat = subset(OME, OME != "N/A") # manually remove OME missing values identified with "N/A"
dat$OME = factor(dat$OME)
str(dat)
pairs(dat)
plot(dat$Age, dat$Correct / dat$Trials )
plot(dat$OME, dat$Correct / dat$Trials )
plot(dat$Loud, dat$Correct / dat$Trials )
plot(dat$Noise, dat$Correct / dat$Trials )
mod_glm = glm(Correct/Trials ~ Age + OME + Loud + Noise, data=dat, weights=Trials, family="binomial")
summary(mod_glm)
plot(residuals(mod_glm, type="deviance"))
plot(fitted(mod_glm), dat$Correct/dat$Trials)
X = model.matrix(mod_glm)[,-1] # -1 removes the column of 1s for the intercept
head(X)
str(dat)
head(X)
install.packages("rjags")
####JAGS
mod_string = " model {
for (i in 1:length(y)) {
y[i] ~ dbin(phi[i], n[i])
logit(phi[i]) = b0 + b[1]*Age[i] + b[2]*OMElow[i] + b[3]*Loud[i] + b[4]*Noiseincoherent[i]
}
b0 ~ dnorm(0.0, 1.0/5.0^2)
for (j in 1:4) {
b[j] ~ dnorm(0.0, 1.0/4.0^2)
}
} "
library(:rjags)
library("rjags")
data_jags = as.list(as.data.frame(X))
data_jags$y = dat$Correct # this will not work if there are missing values in dat (because they would be ignored by model.matrix). Always make sure that the data are accurately pre-processed for JAGS.
data_jags$n = dat$Trials
str(data_jags) # make sure that all variables have the same number of observations (712).
params = c("b0", "b")
mod1 = jags.model(textConnection(mod1_string), data=data_jags, n.chains=3)
mod1 = jags.model(textConnection(mod_string), data=data_jags, n.chains=3)
update(mod1, 1e3)
mod1_sim = coda.samples(model=mod1,
variable.names=params,
n.iter=5e3)
mod1_csim = as.mcmc(do.call(rbind, mod1_sim))
## convergence diagnostics
plot(mod1_sim, ask=TRUE)
gelman.diag(mod1_sim)
autocorr.diag(mod1_sim)
raftery.diag(mod1_sim)
gelman.diag(mod1_csim)
gelman.diag(mod1_sim)
raftery.diag(mod1_sim)
raftery.diag(mod1_csim)
?raftery.diag
summary(mod1_sim)
head(X)
str(dat)
# predict
(pm_coef = colMeans(mod1_csim))
pm_coef
xb = pm_coef["b0"] + pm_coef[1]*60 + pm_coef[2]*0 + pm_coef[3]*50 + pm_coef[4]*0
phat = 1.0 / (1.0 + exp(-xb))
phat
X
pm_coef
pm_Xb = pm_coef["int"] + X %*% pm_coef[1:4]
phat = 1.0 / (1.0 + exp(-pm_Xb))
head(phat)
pm_Xb
X %*% pm_coef[1:4]
pm_Xb = pm_coef["b0"] + X %*% pm_coef[1:4]
phat = 1.0 / (1.0 + exp(-pm_Xb))
head(phat)
(tab0.7 = table(phat > 0.7, (dat$Correct / dat$Trials) > 0.7))
sum(diag(tab0.7)) / sum(tab0.7)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("qrqc")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, autodep = TRUE)
data <- readDNAStringSet("../data/958868915368-CdsFastaResults.fasta")
library(Biostrings)
data <- readDNAStringSet("../data/958868915368-CdsFastaResults.fasta")
data
names(data)
table(names(data))
length(table(names(data)))
head(names(data))
head(names(data),10)
?read.delim
gff <- readLines("../data/535962818318-GffResults.gff")
head(gff)
grep('^#',gff)
grep('^#',gff,invert = T)
grep('^\\w',gff,invert = T)
grep('^[:alnum:]',gff,invert = T)
grep('^[:alnum:]',gff)
grep('^[:alnum:].+', gff)
grep('^[[:alnum:]].+', gff)
gff <- gff[grep('^[[:alnum:]].+', gff)]
head(gff)
tail(gff)
gff <- readLines("../data/535962818318-GffResults.gff")
setwd("G:/My Drive/Shared_2019/Coronavirus_Bayseian_Modelling/scripts")
library(Biostrings)
cds_omsn <- readDNAStringSet("../data/cleaned_cds_osmn.fasta")
meta_omsn <- read_csv("../data/meta_data_osmn.csv")
library(tidyverse)
rscu_cds <- get_rscu(cds_omsn)
rscu_cds <- as_tibble(rscu_cds)
library(Biostrings)
library(tidyverse)
library(ggplot2)
library(SynMut)
cds_omsn <- readDNAStringSet("../data/cleaned_cds_osmn.fasta")
meta_omsn <- read_csv("../data/meta_data_osmn.csv")
rscu_cds <- get_rscu(cds_omsn)
rscu_cds <- as_tibble(rscu_cds)
index_tmp <- !names(rscu_cds) %in% c("ATG", "TGG", "TAA", "TAG", "TGA")
rscu_cds <- rscu_cds[,index_tmp]  # remove stop codons, atg and tgg
## prepare data
df_tmp <- meta_omsn %>% select(id, protein_name, `Virus Genus`, Host)
df_tmp <- bind_cols(df_tmp, rscu_cds)
df_tmp <- df_tmp %>% gather(key = "codon", value = "RSCU", AAA:TTT)
df_tmp$AA <- as.character(translate(DNAStringSet(df_tmp$codon)))
## codon usage between virus genus
ggplot(df_tmp) +
geom_boxplot(aes(x = codon, y = RSCU, fill = AA, color = AA),
outlier.size = 0.1, outlier.alpha = 0.2)+
facet_grid(vars(`Virus Genus`),vars(AA),scales = "free")+
theme(axis.text.x = element_text(angle = 90))
# render rmd --------------------------------------------------------------
rmarkdown::render("./index.rmd")
